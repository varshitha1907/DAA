word break problem
def word_break(s, word_dict):
    n = len(s)
    dp = [False] * (n + 1)
    dp[0] = True  # Base case: an empty string is always breakable
    
    for i in range(1, n + 1):
        for j in range(i):
            if dp[j] and s[j:i] in word_dict:
                dp[i] = True
                break
    
    return dp[n]

# Example usage:
word_dict = {"apple", "pen", "applepen", "pine", "pineapple"}
s = "pineapplepenapple"
print("Can the string be segmented?", word_break(s, word_dict))


Word trap problem
def word_trap(s, word_dict):
    results = []
    
    def backtrack(start, path):
        if start == len(s):
            results.append(" ".join(path))
            return
        
        for end in range(start + 1, len(s) + 1):
            if s[start:end] in word_dict:
                backtrack(end, path + [s[start:end]])
    
    backtrack(0, [])
    return results

# Example usage:
word_dict = {"cat", "cats", "and", "sand", "dog"}
s = "catsanddog"
print("All possible word traps:")
print(word_trap(s, word_dict))


OBST
def obst(keys, freq):
    n = len(keys)
    cost = [[0] * (n) for _ in range(n)]
    
    for i in range(n):
        cost[i][i] = freq[i]
    
    for L in range(2, n + 1):
        for i in range(n - L + 1):
            j = i + L - 1
            cost[i][j] = float('inf')
            for r in range(i, j + 1):
                c = cost[i][r - 1] + sum(freq[i:j + 1]) + cost[r + 1][j]
                if c < cost[i][j]:
                    cost[i][j] = c
    
    return cost[0][n - 1]

# Example usage:
keys = [10, 12, 20]
freq = [34, 8, 50]
min_cost = obst(keys, freq)
print("Minimum cost of constructing an OBST:", min_cost)


